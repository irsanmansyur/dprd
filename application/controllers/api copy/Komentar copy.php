<?php

defined('BASEPATH') or exit('No direct script access allowed');

// This can be removed if you use __autoload() in config.php OR use Modular Extensions
/** @noinspection PhpIncludeInspection */
// require APPPATH . '/libraries/REST_Controller.php';


use Restserver\Libraries\RestController;

require(APPPATH . 'libraries/RestController.php');
/**
 * This is an example of a few basic user interaction methods you could use
 * all done with a hardcoded array
 *
 * @package         CodeIgniter
 * @subpackage      Rest Server
 * @category        Controller
 * @author          Phil Sturgeon, Chris Kacerguis
 * @license         MIT
 * @link            https://github.com/chriskacerguis/codeigniter-restserver
 */
class Komentar extends RestController
{

    function __construct()
    {
        // Construct the parent class
        parent::__construct();

        // Configure limits on our controller methods
        // Ensure you have created the 'limits' table and enabled 'limits' within application/config/rest.php
        $this->methods['index_get']['limit'] = 10; // 500 requests per hour per user/key
        $this->methods['index_post']['limit'] = 100; // 100 requests per hour per user/key
        $this->methods['index_delete']['limit'] = 50; // 50 requests per hour per user/key
        $this->load->library('form_validation');

        $this->load->model('komentar_m');
    }

    public function index_get()
    {
        // Users from a data store e.g. database
        $users = [
            ['id' => 1, 'name' => 'John', 'email' => 'john@example.com', 'fact' => 'Loves coding'],
            ['id' => 2, 'name' => 'Jim', 'email' => 'jim@example.com', 'fact' => 'Developed on CodeIgniter'],
            ['id' => 3, 'name' => 'Jane', 'email' => 'jane@example.com', 'fact' => 'Lives in the USA', ['hobbies' => ['guitar', 'cycling']]],
        ];
        $komentar = $this->komentar_m;
        $komentar->setFieldTable($this->get());
        $key = array_keys($this->get());
        $eks = $komentar->getWhere($key);
        if ($eks->num_rows() == 1)
            $data = $eks->row_array();
        else
            $data = $eks->result_array();
        if ($data) {
            $this->response([
                "status" => true,
                "data" => $data
            ], 200); // OK (200) being the HTTP response code
        } else {
            // Set the response and exit
            $this->response([
                'status' => false,
                'message' => 'No users were found'
            ], 404);
        }
    }

    public function index_post()
    {

        $komentar = $this->komentar_m;
        $validation = $this->form_validation;
        $validation->set_rules($komentar->getRules());
        if ($validation->run()) {
            $komentar->setFieldTable($this->post());
            $komentar->add();
            $respon = hasilCUD("Berhasil Input data");
            if ($respon->status) {
                $this->response($respon, 200); // NOT_FOUND (404) being the HTTP response code
                // $response = is_login();
                // if (!$response->status) {
            } else
                $this->response($respon, 404); // NOT_FOUND (404) being the HTTP response code
        } else {
            $fieldError = [];
            foreach ($komentar->getRules() as $row => $val) {
                if (form_error($val['field'])) {
                    $fieldError[$val['field']] = form_error($val['field']);
                }
            };

            $this->response([
                'status' => FALSE,
                'message' => 'Lengkapi data dulu',
                "dataErrors" => $fieldError
            ], 404); // NOT_FOUND (404) being the HTTP response code
        }
        // $message = [
        //     'id' => 100, // Automatically generated by the model
        //     'name' => $this->post('name'),
        //     'email' => $this->post('email'),
        //     'message' => 'Added a resource'
        // ];

        // $this->set_response($message, \Restserver\Libraries\REST_Controller::HTTP_CREATED); // CREATED (201) being the HTTP response code
    }

    public function index_put()
    {
        $message = [
            'status' => false,
            'message' => 'Data Tidak valid',
            'data' => null
        ];
        $key = array_keys($this->put());
        if (count($key) > 0) {
            $komentar = $this->komentar_m;
            $komentar->setFieldTable($this->put());
            $eks = $komentar->getWhere($key);
            if ($eks->num_rows() > 0) {
                $komentar->deleted();
                $respon = hasilCUD("Data berhasil Dihapus");
                if ($respon->status) {
                    $this->set_response($respon, 200); // NO_CONTENT (204) being the HTTP response code
                } else
                    $this->set_response($respon, 200); // NO_CONTENT (204) being the HTTP response code
            } else
                $this->set_response([
                    "status" => false,
                    "message" => "Tidak ditemukan"
                ], 404); // NO_CONTENT (204) being the HTTP response code

        }
    }
    public function index_delete()
    {

        // $user = $this->config->config["rest_valid_logins"]);

        // $response = is_login(3);
        // if ($response->status) {
        $komentar = $this->komentar_m;
        // die(var_dump($komentar->getKeyName()));
        $komentar->setFieldTable($this->delete());
        // die(var_dump($komentar->getFieldTable()));

        $komentar->deleted();

        $eks = hasilCUD();
        if ($eks->status) {
            $message = [
                'message' => 'Deleted the resource'
            ];
            $this->set_response($message, 200); // NO_CONTENT (204) being the HTTP response code

        } else {
            $this->response([
                'status' => false,
                "message" => $eks->message
            ], 404); // BAD_REQUEST (400) being the HTTP response code
        }
    }
}
